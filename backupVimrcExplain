" Verifica se o terminal suporta cores avançadas e define as configurações de cor apropriadas
if has('termguicolors')
    set termguicolors
else
    set t_Co=256
endif

" Ativa o reconhecimento de tipo de arquivo, plugins e indentação automática
filetype plugin indent on

" Ativa o destaque de sintaxe
syntax on

" Exibe o título da janela
set title

" Define a codificação de caracteres para UTF-8
set encoding=utf-8

" Configura o comportamento do backspace
set backspace=indent,eol,start

" Desativa os sinos de erro
set noerrorbells

" Confirma antes de realizar ações que podem perder alterações
set confirm

" Permite a ocultação de buffers sem salvar
set hidden

" Define a posição padrão de novas janelas de split abaixo e à direita da atual
set splitbelow
set splitright

" Define caracteres para preenchimento de várias áreas da interface
set fillchars=vert:│,fold:-,eob:~,lastline:@

" Define os diretórios a serem pesquisados com o comando :find
set path=.,**

" Desativa a criação de arquivos de swap
set noswapfile

" Desativa a criação de backups de arquivos
set nobackup

" Configura o diretório para armazenamento de históricos de undo
set undodir=~/.vim/undodir

" Ativa o histórico de undo persistente
set undofile

" Desativa a quebra automática de linha
set nowrap

" Quebra linhas sem cortar palavras
set linebreak

" Desativa a exibição de caracteres invisíveis
set nolist

" Configura caracteres para exibição de espaços, tabs, e fins de linha
set listchars=tab:›-,space:·,trail:◀,eol:↲

" Exibe números de linha e números relativos à linha atual
set number 
set relativenumber

" Mantém 2 linhas de contexto em torno do cursor
set scrolloff=2

" Destaca a linha do cursor
set cursorline

" Configura o cursor para diferentes modos
let &t_SI="\e[6 q"
let &t_EI="\e[2 q"

" Configura indentação automática e inteligente
set autoindent
set smartindent

" Configura o uso de espaços em vez de tabs, e define o tamanho das indentações
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" Configura a pesquisa para ignorar maiúsculas e minúsculas, exceto quando a busca contém maiúsculas
set ignorecase
set smartcase

" Melhora a interface de busca e destaque de palavras encontradas
set incsearch
set hls
let @/ = ""

" Configura opções de autocompletar, incluindo correção ortográfica
set complete+=kspell
set completeopt=menuone,longest
set shortmess+=c

" Define os idiomas para correção ortográfica
set spelllang=pt_br,en

" Desativa a correção ortográfica por padrão
set nospell

" Mapeia teclas para comportamentos específicos durante a autocompletação
inoremap <expr> <up> pumvisible() ? '<c-p>' : '<up>'
inoremap <expr> <down> pumvisible() ? '<c-n>' : '<down>'
inoremap <expr> <right> pumvisible() ? '<c-y>' : '<right>'
inoremap <expr> <cr> pumvisible() ? '<c-y>' : '<cr>'
inoremap <expr> <left> pumvisible() ? '<c-e>' : '<left>'

" Função para autocompletar shebangs em scripts
function! Hashbangs()
    let hb = ['#!/bin/bash', '#!/usr/bin/env bash', '#!/bin/sh', '#!/usr/bin/awk -f']
    call complete(col('.'), hb)
    return ''
endfunction

" Mapeia Ctrl-X seguido de h para chamar a função Hashbangs
imap <c-x>h <c-r>=Hashbangs()<cr>

" Configurações de menu de complementação
set wildmenu
set wildmode=longest,full
set wildoptions=pum

" Define o esquema de cores
colorscheme habamax

" Configurações da linha de status
set noshowmode
set laststatus=2

" Personaliza a aparência da linha de status
hi statusline   cterm=NONE ctermfg=0 ctermbg=7   guibg=#C1C2D0 guifg=#000000
hi statuslinenc cterm=NONE ctermfg=0 ctermbg=240 guibg=#616270 guifg=#000000

" Grupo para eventos relacionados a mudanças de modo
augroup ModeEvents
    autocmd!
    au InsertEnter * hi statusline cterm=NONE ctermfg=0 ctermbg=10 guibg=#7BC86F
    au InsertLeave * hi statusline cterm=NONE ctermfg=0 ctermbg=7 guibg=#C1C2D0
    au ModeChanged *:[vV\x16]* hi statusline cterm=NONE ctermfg=0 ctermbg=13 guibg=#C990DC
    au Modechanged [vV\x16]*:* hi statusline cterm=NONE ctermfg=0 ctermbg=7 guibg=#C1C2D0
augroup end

" Carrega configurações personalizadas para a linha de status
function! LoadStatusLine()
    let g:left_sep='│'
    let g:right_sep='│'

    let g:currentmode={
        \ 'n'  : 'Normal',
        \ 'no' : 'Normal-Operator Pending',
        \ 'v'  : 'Visual',
        \ 'V'  : 'V-Line',
        \ '' : 'V-Block',
        \ 's'  : 'Select',
        \ 'S'  : 'S-Line',
        \ '' : 'S-Block',
        \ 'i'  : 'Insert',
        \ 'R'  : 'Replace',
        \ 'Rv' : 'V-Replace',
        \ 'c'  : 'Command',
        \ 'cv' : 'Vim Ex',
        \ 'ce' : 'Ex',
        \ 'r'  : 'Prompt',
        \ 'rm' : 'More',
        \ 'r?' : 'Confirm',
        \ '!'  : 'Shell',
        \ 't'  : 'Terminal'
        \}

    set statusline=\ %{toupper(g:currentmode[mode()])}
    set statusline+=\ %{left_sep}
    set statusline+=\ %n
    set statusline+=\ %{left_sep}
    set statusline+=\ %f%m\ %y
    set statusline+=\ %{left_sep}
    set statusline+=\ %{&ff}\ %{&fenc!=''?&fenc:&enc}
    set statusline+=\ %{left_sep}
    set statusline+=\ %=
    set statusline+=\ %{right_sep}
    set statusline+=\ %l/%L,%v
    set statusline+=\ %{right_sep}
    set statusline+=\ %P\
endfunction

call LoadStatusLine()

" Estilizações adicionais para diferentes componentes da interface
hi Normal guibg=NONE ctermbg=NONE

hi CursorLine guibg=#202130

hi Comment cterm=italic gui=italic

hi VertSplit ctermbg=NONE guibg=NONE ctermfg=7 guifg=#c1c2d0

hi TabLine      guifg=#9192a0 guibg=#303140 gui=none
hi TabLineSel   guifg=#a1a2b0 guibg=#101120 gui=bold
hi TabLineFill  guifg=#9192a0 guibg=#303140 gui=none

hi Visual guifg=NONE guibg=#303140

